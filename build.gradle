buildscript {
    repositories {
        mavenCentral()
        jcenter()
        maven { url 'https://jitpack.io' }
    }
    dependencies {
        classpath "com.github.hurricup:gradle-grammar-kit-plugin:2017.1.1"
        classpath "gradle.plugin.org.jetbrains:gradle-intellij-plugin:0.1.10"
    }
}

plugins {
    id 'org.jetbrains.intellij' version '0.3.7'
    id 'org.jetbrains.kotlin.jvm' version '1.2.61'
}

import org.jetbrains.grammarkit.tasks.GenerateLexer
import org.jetbrains.grammarkit.tasks.GenerateParser

apply plugin: 'idea'
idea {
    module {
        generatedSourceDirs += file('src/gen')
        outputDir = file("$buildDir/classes/main")
        testOutputDir = file("$buildDir/classes/test")
    }
}

apply plugin: 'org.jetbrains.intellij'
intellij {
    updateSinceUntilBuild = false
    instrumentCode = false
}

apply plugin: 'java'
apply plugin: 'kotlin'

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

compileKotlin {
    kotlinOptions {
        languageVersion = '1.2'
        apiVersion = '1.2'
    }
}

tasks.withType(JavaCompile) { options.encoding = 'UTF-8' }
sourceSets {
    main {
        java.srcDirs += 'src/gen'
    }
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

apply plugin: 'org.jetbrains.grammarkit'
grammarKit {
    grammarKitRelease = '1.5.2'
}

test {
    testLogging {
        events 'skipped', 'failed'
        exceptionFormat = 'full'
    }

    beforeSuite { suite ->
        if (suite.className != null) {
            println()
            println(suite.className)
        }
    }
    afterTest { desc, result ->
        def c = '.'
        if (result.resultType == TestResult.ResultType.FAILURE) {
            c = 'X'
        } else if (result.resultType == TestResult.ResultType.SKIPPED) {
            c = 'S'
        }
        print(c)
        System.out.flush()
    }
    afterSuite { println() }
}

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly('com.github.JetBrains:Grammar-Kit:34fd65b92af957c25d940b828d81ab3ba9b398b0') {
        exclude group: 'org.jetbrains.plugins'
        exclude module: 'idea'
    }
    compile project(':vclang')
    testCompile 'junit:junit:4.+'
    testCompile 'org.assertj:assertj-core:3.2.0'
}

task generateArdLexer(type: GenerateLexer) {
    description 'Generates lexer'
    group 'Source'
    source 'src/main/grammars/ArdLexer.flex'
    targetDir 'src/gen/com/jetbrains/arend/ide/lexer'
    targetClass 'ArdLexer'
    purgeOldFiles = true
}

task generateArdParser(type: GenerateParser) {
    description 'Generates parser'
    group 'Source'
    source 'src/main/grammars/ArdParser.bnf'
    targetRoot = 'src/gen'
    pathToParser '/com/jetbrains/arend/ide/parser/ArdParser.java'
    pathToPsiRoot '/com/jetbrains/arend/ide/psi'
    purgeOldFiles = true
}

task generateArdlLexer(type: GenerateLexer) {
    description 'Generates lexer'
    group 'Source'
    source 'src/main/grammars/ArdlLexer.flex'
    targetDir 'src/gen/com/jetbrains/arend/ide/lexer'
    targetClass 'ArdlLexer'
    purgeOldFiles = true
}

task generateArdlParser(type: GenerateParser) {
    description 'Generates parser'
    group 'Source'
    source 'src/main/grammars/ArdlParser.bnf'
    targetRoot = 'src/gen'
    pathToParser '/com/jetbrains/arend/ide/parser/ArdlParser.java'
    pathToPsiRoot '/com/jetbrains/arend/ide/vclpsi'
    purgeOldFiles = true
}

compileKotlin.dependsOn generateArdLexer, generateArdParser, generateArdlLexer, generateArdlParser
compileTestKotlin.dependsOn generateArdLexer, generateArdParser, generateArdlLexer, generateArdlParser

task wrapper(type: Wrapper) {
    gradleVersion = '4.3'
}

// Prelude stuff

def preludeOutputDir = "src/main/resources/lib"

task prelude(type:Copy) {
    //noinspection GroovyAssignabilityCheck
    from project(':vclang').file('lib/Prelude.vc')
    //noinspection GroovyAssignabilityCheck
    from project(':vclang').file("${project(':vclang').buildDir}/classes/main/lib/Prelude.vcc")
    into preludeOutputDir
}

prelude.dependsOn(":vclang:prelude")
